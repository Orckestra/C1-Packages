@using Composite.Search
@using Composite.Search.SimplePageSearch

@inherits RazorFunction
@functions {
	public override string FunctionDescription
	{
		get { return "Search results rendering"; }
	}

	public static WidgetFunctionProvider SearchableDataTypeSelector()
	{
		return GetMultiSelectorWidget(() => SimpleSearchFacade.GetSearchableDataTypeOptions());
	}

	public static WidgetFunctionProvider FacetSelector()
	{
		return GetMultiSelectorWidget(() => SimpleSearchFacade.GetFacetOptions());
	}

	private static WidgetFunctionProvider GetMultiSelectorWidget(Expression<Func<object>> optionsGetter)
	{
		var method = ((MethodCallExpression)optionsGetter.Body).Method;

		return StandardWidgetFunctions.DropDownList(method.DeclaringType, method.Name, "Item1", "Item2", true, false);
	}

	[FunctionParameter(Label = "Show Search Form", Help = "If checked, a search form will be shown above the search result.", DefaultValue = "true")]
	public bool ShowSearchForm { get; set; }

	[FunctionParameter(Label = "Search Form Button Label", Help = "The text to show on the search form submit button. When left blank a generic search icon is used.", DefaultValue = "")]
	public string SearchButtonLabel { get; set; }

	[FunctionParameter(Label = "Results Per Page", Help = "The maximum number of results to show at a time. If the search contains more results links will be provided to navigate results.", DefaultValue = "10")]
	public int PageSize { get; set; }

	[FunctionParameter(Label = "Search Current Site Only", Help = "If checked only the current site will be searched. Uncheck to search all subsites.", DefaultValue = "true")]
	public bool CurrentSite { get; set; }

	[FunctionParameter(Label = "Show Highlights", Help = "If checked search results will have highlights (when available) shown below the title.", DefaultValue = "false")]
	public bool ShowDescriptions { get; set; }

	public IEnumerable<ISearchDocumentSourceProvider> SearchDocumentSourceProviders { get; set; }

	[FunctionParameter(Label = "Data Types", DefaultValue = null,
		Help = "Allows limiting the search results to the given data types. If none selected all the data types will be shown.",
		WidgetFactoryMethod = "SearchableDataTypeSelector")]
	public IEnumerable<string> DataTypes { get; set; }

	[FunctionParameter(Label = "Facets", DefaultValue = null,
		Help = "Select facets to be shown on the search result page.",
		WidgetFactoryMethod = "FacetSelector")]
	public IEnumerable<string> FacetFields { get; set; }

	string GetFacetFieldCheckboxPrefix(string fieldName)
	{
		return "f_" + fieldName + "_";
	}

	SimpleSearchResult _searchResult;


	private int PageNumber
	{
		get
		{
			int page;
			return int.TryParse(Request["p"], out page) && page >= 1 ? page : 1;
		}
	}

	protected int TotalPages
	{
		get { return (int)Math.Ceiling((decimal)_searchResult.ResultsFound / PageSize); }
	}

	private string[] GetFacetSelection(string fieldName)
	{
		var prefix = GetFacetFieldCheckboxPrefix(fieldName);
		return Request.QueryString.AllKeys
			.Where(key => key.StartsWith(prefix))
			.Select(key => key.Substring(prefix.Length))
			.ToArray();
	}

}

@{

	var searchQuery = Request.QueryString["q"] ?? string.Empty;

	bool showFacets = false;

	if (!string.IsNullOrWhiteSpace(searchQuery) && searchQuery.Length > 1)
	{
		// Tokenize
		searchQuery = searchQuery.Trim().ToLower();
		string[] keywords = searchQuery.Split(new[] {' '}, StringSplitOptions.RemoveEmptyEntries);

		var knowTypes = DataFacade.GetAllInterfaces().ToDictionary(t => t.FullName);

		Type[] dataTypes = DataTypes != null
			? DataTypes.Select(name => knowTypes[name]).ToArray()
			: null;


		var facetsToQuery = FacetFields ?? Array.Empty<string>();
		showFacets = facetsToQuery.Any();

		var facets = facetsToQuery.Select(fieldName => new SimpleSearchQueryFacet
		{
			Name = fieldName, Selections = GetFacetSelection(fieldName)
		});

		_searchResult = SimpleSearchFacade.Search(new SimpleSearchQuery
		{
			Culture = Data.CurrentLocale,
			Keywords = keywords,
			DataTypes = dataTypes,
			CurrentSiteOnly = CurrentSite,
			PageNumber = PageNumber - 1,
			Facets = facets.ToArray(),
			PageSize = PageSize
		});
	}
	else
	{
		_searchResult = new SimpleSearchResult();
	}
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
</head>
<body>
<div class="simplepagesearch clearfix">
	@if (ShowSearchForm)
	{
		if (showFacets)
		{
			<form id="SearchForm" action="@CurrentPageNode.Url" class="search-form form-inline" method="get" role="search">
				<div class="clearfix">
					<div class="form-group">
						<input type="text" class="form-control" placeholder="Search" id="searchText" name="q" value="@searchQuery"/>
					</div>

					<button type="submit" class="btn btn-default">
						@if (string.IsNullOrEmpty(@SearchButtonLabel))
						{
							<span class="glyphicon glyphicon-search"></span>
						}
						else
						{
							@SearchButtonLabel
						}
					</button>
				</div>
				
				<div class="row" style="margin-top: 20px;">
					<div class="col-md-4">
						@ShowFacets(_searchResult)
					</div>
					<div class="col-md-8">
						@ShowFoundDocuments(searchQuery)
					</div>
				</div>
			</form>
		}
		else
		{
			<div class="clearfix">
				@Function("Composite.Search.SimplePageSearch.SearchForm",
					new
					{
						SearchResultPage = new DataReference<IPage>(CurrentPageNode.Id),
						SearchButtonLabel = SearchButtonLabel,
					})
			</div>
			if (!string.IsNullOrWhiteSpace(searchQuery))
			{
				<hr/>
			}
			@ShowFoundDocuments(searchQuery)
		}
	}
	else
	{
		@ShowFoundDocuments(searchQuery)
	}
	
</div>
</body>
</html>


@helper ShowFoundDocuments(string searchQuery)
{
	if (string.IsNullOrWhiteSpace(searchQuery))
	{
		return;
	}

	<p>
		@Html.Raw(string.Format(Resources.SimplePageSearch.SearchResults_TotalCount, _searchResult.ResultsFound, Server.HtmlEncode(searchQuery)))
	</p>

	<ol class="simplepagesearch-results" start="@(PageSize*(PageNumber-1)+1)">
		@foreach (var entry in _searchResult.Entries)
		{
			<li>
				<a href="@entry.Url">
					@Html.Raw(entry.Title)
				</a>
				@if (ShowDescriptions && !string.IsNullOrEmpty(entry.Description))
				{
					<br />
					@Html.Raw(entry.Description)
				}
			</li>
		}
	</ol>
	if (TotalPages > 1)
	 {
		 <ul class="pagination">
			 @for (int i = 1; i <= TotalPages; i++)
			 {
				 if (i == PageNumber)
				 {
					 <li class="active"><span>@i</span></li>
				 }
				 else
				 {
					 <li><a href="?p=@i&amp;q=@searchQuery">@i</a></li>
				 }
			 }
		 </ul>
	 }
}

@helper ShowFacets(SimpleSearchResult result)
{
	var labels = SimpleSearchFacade.GetFacetOptions().ToDictionary(t => t.Item1, t => t.Item2);

	<div class="facets">
		@foreach (var facet in result.Facets)
		{
			if (facet.Hits.Count == 0)
			{
				continue;
			}

			<div class="list-group">
				<div class="list-group-item disabled">
					@labels[facet.Name]
				</div>
				@foreach (var hit in facet.Hits)
				{
					string key = GetFacetFieldCheckboxPrefix(facet.Name) + hit.Value;
					bool isChecked = Request.QueryString.AllKeys.Contains(key);

					<div class="list-group-item">
						<div class="checkbox">
							<label for="@key">
								<input type="checkbox" name="@key" value="1" id="@key"
									   @if (isChecked) { <text> checked="checked" </text>   } />
								@hit.Label
							</label>
						</div>
						<span class="badge">@hit.HitCount</span>
					</div>
				}
			</div>
		}
	</div>
}